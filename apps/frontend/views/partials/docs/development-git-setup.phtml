
<h1>Development: GIT setup</h1>

<p>
Our development version is hosted and mantained on GitHub. The official page can be found at <a href="https://github.com/monocasual/giada">github.com/monocasual/giada</a> and the repository with the master branch at
</p>
<p class="code">
	https://github.com/monocasual/giada.git<br />
	git://github.com/monocasual/giada.git
</p>
<p>
Please refer to the <a href="https://help.github.com/">GitHub documentation</a> on how to <em>fork</em>, <em>pull</em>, <em>push</em> and so on. If you're new to GitHub, we would suggest a very nice <a href="http://net.tutsplus.com/tutorials/other/getting-the-hang-of-github/">tutorial</a> for beginners.
</p>

<h2>Branching model</h2>

<p>We put the most experimental code in a <em>feature</em> branch. When the new feature is completed, we merge/rebase the feature branch into <em>master</em> and we drop the feature branch. However the master branch does not necessarily point to the latest release. For that, we use tags, whenever a new release is ready. For example, if you do <span class="code">git tag --list</span> you will see the full tag list:</p>

<pre class="code">
v0.10.0
v0.10.1
v0.10.2
v0.11.0
v0.11.1
v0.11.2
...
</pre>

<p>Do you want the release v0.11.2? Just <span class="code">git checkout v0.11.2</span> and you're done.</p>

<h2>TDD and continuous integration</h2>

<p>Our development style strives to be test-driven as best it can. There is a daily growing test suite under <span class="code">src/tests</span> that you can compile and run as described in chapter <a href="{{ url('documentation/show/compiling-from-source') }}">Compiling from source</a>. A subset of those tests
are crafted for <a href="https://travis-ci.org/">Travis CI</a> and they rely upon travis.yml script, which takes care of some "dependencies" (wave files, midimaps, VST plugins and so on). The script basically downloads the needed files, for example:</p>

<pre class="code">
# Download midimaps package for testing purposes

- wget https://github.com/monocasual/giada-midimaps/archive/master.zip -O giada-midimaps-master.zip
- unzip giada-midimaps-master.zip
- mkdir -p $HOME/.giada/midimaps
- cp giada-midimaps-master/midimaps/* $HOME/.giada/midimaps
</pre>

<p>
You can however run the tests locally thanks to our smart configure script: it's instructed to guess whether those dependencies are present. If not, all test cases that require external files will adjust themselves accordingly.
</p>

<h2>Compiling the source in the local repository</h2>
<p>
The source in the repository follows the same rules of the <em>.tar</em> package you download from this website. In the chapter <a href="{{ url('documentation/show/compiling-from-source') }}">Compiling from source</a> you will find all the informations needed.
</p>

<p>
The <span class="code">configure</span> and/or the <span class="code">make</span> scripts may complain about something, especially if you alter, add or remove the files in the repository. In that case use the included <span class="code">autogen.sh</span> script (available only in the repository):
</p>

<pre class="code">
./autogen.sh
configure [...]
make
</pre>

<p>
The first time you clone the git repository you have to initialize it, because Giada contains a couple of external dependencies configured as Git submodules. Go into the project folder, root level and do:
</p>

<pre class="code">
git submodule init
git submodule update
</pre>
