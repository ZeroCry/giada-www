<h1>MIDI output management</h1>

<p>Giada is able to output MIDI messages to the external world, both from <strong>sample channels</strong> and, of course, <strong>MIDI channels</strong>, with some notable differences. More precisely, there are two kinds of messages: <strong>regular MIDI messages</strong> and <strong>MIDI lightning messages</strong>.</p>

<h2>Regular messages vs lightning messages</h2>

<p><strong>Regular MIDI messages</strong> correspond to MIDI events, namely all those events you record with your physical devices, or actions edited in the Action Editor. Obviously this kind of events can be sent only from <strong>MIDI channels</strong>. On the other hand <strong>MIDI lightning messages</strong> are special codes used to light up parts of external devices, such as buttons, keys, knobs and many other shimmering things. The latter type of messages can be outputted from <strong>sample channels</strong> as well.</p>

<p>The following table shows what you can and cannot output from channels:</p>

<table class="table">
<tr>
  <td></td>
  <td>regular MIDI messages</td>
  <td>MIDI lightning messages</td>
</tr>
<tr>
  <td>Sample channel</td>
  <td>✘</td>
  <td>✔</td>
</tr>
<tr>
  <td>MIDI channel</td>
  <td>✔</td>
  <td>✔</td>
</tr>
</table>

<h3>Configuring the output</h3>

<p>Click on the <strong>main button</strong> of any channel and select <em>Setup MIDI output</em> from the menu, in order to configure how to output MIDI messages. A new window will pop up containing several tools.</p>

<h4>Regular MIDI messages</h4>

<p><img src="{{ url('img/docs/midi-output-config-regular.png') }}" alt="MIDI output config tool, regular" /> This kind of messages are managed by the dropdown menu shown on the left. If you check <em>enable MIDI output</em>, MIDI messages will be sent outside Giada whenever an action occurs, through the MIDI channel specified with the drop-down menu on the right. With this technique you will be able to control external MIDI hardware or other software as well.</p>

<h4>MIDI lightning messages</h4>

<p><img src="{{ url('img/docs/midi-output-config-lightning.png') }}" alt="MIDI output config tool, lightning" /> MIDI lightning requires key binding between the app and your physical device, so that whenever an event occurs, Giada sends a MIDI lightning message to the right part of your controller.</p>

<p>You bind controller elements to the events through the MIDI learning tool shown on the left, which works in the same way of the MIDI input learning tool described in <a href="{{ url('documentation/show/midi-input-management') }}">MIDI input management</a>.</p>

<p>Currently <sup>January 2016</sup> you can light up your device for the following events:</p>

<ul>
  <li><strong>playing</strong> events, including <em>start</em>, <em>stop</em>, <em>wait</em>, <em>ending</em> statuses;
  <li><strong>mute</strong> events such as <em>mute on</em> and <em>mute off</em>;
  <li><strong>solo</strong> events such as <em>solo on</em> and <em>solo off</em>.
</ul>

<h3>How MIDI lightning works</h3>

<p>Giada needs to know what data to send when MIDI lightning occurs. Each hardware producer defines its own set of messages, so we introduce the concept of <strong>midimap files</strong>. A midimap is a JSON-formatted text file where you define what kind of messages you want Giada to send. They reside in your configuration directory, or more precisely:</p>

<ul>
	<li>Linux — <span class="code">/home/[your_user]/.giada/midimaps/</span>;</li>
	<li>OS X — <span class="code">[your_home]/Library/Application Support/Giada/midimaps/</span>;</li>
	<li>Windows — <span class="code">midimaps/</span> folder, alongside the binary file.</li>
</ul>

<p>Giada will look into those directories on startup. If the files are valid midimap files they will be listed in the <a href="{{ url('documentation/show/configuration') }}">Configuration window</a>, MIDI section. Pick up the minimap file you want to use in the dropdown menu and you are ready to go.</p>

<h4>Anatomy of a midimap file</h4>

<p>A midimap file follows this naming convention: <span class="code">[brand]-[device].giadamap</span>, lower-case text. For example if you own the <a href="http://www.akaipro.com/product/apc20">Akai APC20</a>, the corresponding midimap file would be <span class="code">akai-apc20.giadamap</span>.</p>

<p>On the inside you will find a collection of JSON objects. Every midimap command is made of two things: a <em>key</em> and a <em>message</em>. The following is a complete midimap file, with placeholders:</p>

<pre class="code">
{
  "brand": "[text]",
  "device": "[text]",
  "init_commands": [
    {
      "channel": [MIDI-channel],
      "message": "[hex-message]"
    },
    {
      "channel": [MIDI-channel],
      "message": "[hex-message]"
    },
    ...
  ],
  "mute_on": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "mute_off": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "solo_on": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "solo_off": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "waiting": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "playing": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "stopping": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  },
  "stopped": {
    "channel": [MIDI-channel],
    "message": "[hex-message]"
  }
}
</pre>

<p>The first three elements are the <em>initializers</em>:</p>
<ul>
<li><strong>brand</strong> — the producer name;</li>
<li><strong>device</strong> — the device name;</li>
<li><strong>init_commands</strong> — a set of lightning messages sent on startup.</li>
</ul>

<p>The remaining elements are the <em>events</em>, defining what MIDI lighting message to send when each of them occur.</p>

<h4>Writing a MIDI lightning message</h4>

<p>A MIDI lightning message follows this structure:</p>

<pre class="code">
{
  "channel": [MIDI-channel],
  "message": "[hex-message]"
}
</pre>

<p>In details:</p>

<ul>
<li><strong>MIDI-channel</strong> — the MIDI channel where to output to, in a numeric range of 0-15;</li>
<li><strong>hex-message</strong> — the actual message to send, in hexadecimal form, 4 bytes long.</li>
</ul>

<p>The hexadecimal message contains a special placeholder for the note. Since each message is customized by the vendor, you have to specify where the byte for the note resides. The placeholder is defined as <span class="code">nn</span>; Giada will replace it on the fly once the key has been configured and grabbed with the MIDI learning tool seen before. Below a couple of illustrative lightning messages:</p>

<pre class="code">
{
  "channel": 0,               // MIDI channel 0
  "message": "0x90nn3B00"     // note on byte 2
},
{
  "channel": 7,               // MIDI channel 7
  "message": "0x803Bnn00"     // note on byte 3
},
</pre>

<h4>A complete example of a midimap file</h4>

<p>The following is a midimap file prepared for the <a href="http://global.novationmusic.com/launch/launchpad-s">Novation Launchpad S</a> MIDI controller:</p>

<pre class="code">
{
  "brand": "AKAI",
  "device": "LPD8",
  "init_commands": [
    {
      "channel": 0,
      "message": "0xB0000000"
    },
    {
      "channel": 0,
      "message": "0xB0002800"
    }
  ],
  "mute_on": {
    "channel": 0,
    "message": "0x90nn3F00"
  },
  "mute_off": {
    "channel": 0,
    "message": "0x90nn0C00"
  },
  "solo_on": {
    "channel": 0,
    "message": "0x90nn0F00"
  },
  "solo_off": {
    "channel": 0,
    "message": "0x90nn0C00"
  },
  "waiting": {
    "channel": 0,
    "message": "0x90nn7f00"
  },
  "playing": {
    "channel": 0,
    "message": "0x90nn7f00"
  },
  "stopping": {
    "channel": 0,
    "message": "0x90nn7f00"
  },
  "stopped": {
    "channel": 0,
    "message": "0x80nn7f00"
  }
}
</pre>

<h3>Where do I find midimaps?</h3>

<p>We store the full list of midimap files on GitHub in the <a href="https://github.com/monocasual/giada-midimaps">midimap repository</a>, mirrored in the <a href="http://www.giadamusic.com/forum/midi-lightning-maps-t1323.html">official midimaps topic</a> in our forum. Download the zip archive and uncompress it in the midimap folders seen before.</p>

<p>Pull requests and file submissions are absolutely welcome and encouraged. If you have a MIDI controller whose midimap file is missing, feel free to add it to our collection!</p>
