

<h1>Compiling from source</h1>

<p>This chapter is about compiling the code inside the tar.gz you download from this site. If you are trying to compile the code downloaded/cloned from GitHub, take a look <a href="{{ url('documentation/show/development-git-setup') }}">here</a>.</p>

<p>Compiling Giada from source requires a C++11-compatible compiler. The configure script inside the package, designed for Unix systems and MinGW (Windows) will help you to guess correct values for various system-dependent variables used during compilation. You have to pass it the <span class="code">--target</span> parameter depending on your operating system:
</p>

<p class="code">
./configure --target=[linux | osx | windows]
</p>
<p>
e.g. if you want to compile for Linux, do:
</p>
<p class="code">
./configure --target=linux
</p>
<p>
When the script is done without errors, do:
</p>
<p class="code">
make
</p>
<p>
to compile everything. If you wish to install Giada on Linux, become root and type
</p>
<p class="code">
make install
</p>
<p>
to copy the binary file into /usr/local/bin path.
</p>
<p>
Optionally, if you want to run the test suite, just do:
</p>
<p class="code">
make check
</p>
<p>All unit tests are based on <a href="https://github.com/philsquared/Catch/">Catch automated test framework</a>, which supports several command-line options. Please take a look at the <a href="https://github.com/philsquared/Catch/blob/master/docs/command-line.md">official documentation</a> to understand the gritty details. The command above will just run the entire test suite.</p>

<h3>Debug mode</h3>
<p>You may wish to compile Giada in debug mode, which enables asserts. It is disabled by default. To do that, pass the additional flag <span class="code">--enable-debug</span> to the configuration script.</p>

<h2>Dependencies</h2>
<p>
Giada is based upon several external libraries, plus a custom version of RtAudio shipped with the source package. Our hacked RtAudio provides Jack Transport support on Linux, a feature that you wouldn't find in the vanilla release. At the present moment <sup>January 2018</sup> we suggest you to use the following versions:
</p>

<ul>
<li>FLTK — 1.3.[0 or greater];</li>
<li>Libsndfile — 1.0.28 or greater;</li>
<li>Libsamplerate — 0.1.9 or greater;</li>
<li>Jansson — 2.9 or greater;</li>
<li>RtMidi — 3.0.0 or greater.</li>
</ul>

<h2>How to enable VST support</h2>
<p>
In order to compile Giada with VST support you have to enable the feature via configure script. Add
the following parameter:
</p>
<p class="code">
--enable-vst
</p>
<p>
e.g. if you want to compile for Linux with VST support, do:
</p>
<p class="code">
./configure --target=linux --enable-vst
</p>



<h3>Missing VST headers!</h3>
<p>
You won't find any VST header into our source package, since we cannot distribute the SDK from Steinberg.
To solve this issue:
</p>
<ol>
	<li>
		go to the <a href="http://www.steinberg.net/en/company/developer.html" target="_blank">Steinberg third-party developer support site</a>,
		login into the developer zone and download VST Audio Plugins SDK (latest version);
	</li>

	<li>
		create a new folder (if it does not exist yet) called <span class="code">vst</span> inside <span class="code">giada-[version]-src/src/deps</span>;
	</li>

	<li>
		extract all files from the VST SDK package, browse to <span class="code">pluginterfaces/</span> (it's a directory), grab it and put it inside the new <span class="code">vst</span> folder;
	</li>

	<li>
		start compilation and cross your fingers (just kidding, everything will be alright).
	</li>
</ol>


<h2>Use the official Docker image for Giada</h2>

<p>
Instead of cluttering up your environment with dependencies, scripts and compilers you may try our <a href="https://hub.docker.com/u/monocasual/">Docker image</a>, designed to ease the compilation and testing processes. Take a look at the <a href="https://github.com/monocasual/giada-docker">GitHub repository</a> to know more.
</p>